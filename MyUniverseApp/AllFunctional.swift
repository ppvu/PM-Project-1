//
//  AllFunctional.swift
//  MyUniverseApp
//
//  Created by spezza on 18.01.2021.
//  Проект №1
//
//  За основу берется структура:
//  - Вселенная
//  - Галактики (типы, возраст и взаимодействие друг с другом)
//  - Звездно-планетарные системы (звезда-хост, множество планет вращающихся вокруг звезды)
//  - Звезды (тип, этап эволюции, масса, температура, радиус, светимость)
//  - Планеты (тип, масса, температура, радиус)
//  - Наличие спутников (тоже планет)
//
//
//  Требования (Функциональные)
//
//  Вселенная - набор галактик
//  Галактика - набор звездно-планетарных систем.
//  Звездно-планетарные системы - набор звезд и планет
//  Звезды
//  Планеты
//  Спутники планет
//
//  Звезда инициализируется со случайными значениями своих числовых параметров (от 1 до 100) и случайным типом
//  Этапы эволюции звезды: молодая звезда, старая звезда, финальная стадия: плотный карлик либо черная дыра в зависимости от массы и радиуса (границы массы и радиуса для превращения в черную дыру задаются при инициализации вселенной)
//
//  При появлении планеты у нее создается случайное количество спутников (от 0 до 5)
//
//  - Каждые 10 секунд во вселенной появляется новая галактика (тип галактики задается случайным образом)
//  - Каждые 10 секунд в галактике появляется новая звездно-планетарная система со звездой-хостом
//  - Каждые 10 секунд в системе появляется новая планета (до 9 планет в системе)
//  - Каждые 30 секунд 2 случайно выбранные галактики возрастом более 3 минут сталкиваются
//  - Каждые 60 секунд звезда переходит на следующий этап своей эволюции
//
//  При столкновении галактик происходит их объединение в новую галактику с потерей 10% звездно-планетарных систем (системы уничтожаются случайным образом). Тип новой галактики и ее возраст равен типу и возрасту более тяжелой галактики при столкновении.
//  При превращении звезды в черную дыру звездно-планетарная система прекращает существование. При этом черная дыра остается в галактике и прекращает эволюционировать.
//  При появлении черной дыры в звездно-планетарной системе ее планеты (и их спутники) прекращают существование
//
//
//  Требования (Нефункциональные)
//
//  1. Для подсчета времени в приложении должен использоваться 1 централизованный таймер
//  2. Для передачи текущего времени вселенная использует принцип схожий с Chain Of Responsibility
//  3. Реализовать управление жизненным циклом систем с помощью машины состояний
//  4. Изменение любой подсистемы должны синхронизироваться с состоянием родительской системы
//  5. Использование многопоточности
//  6. Использование SOLID принципов
//
//
//  Требования (UI)
//
//  1. Использовать для отображения всех сущностей UICollectionView с кастомным layout (на выбор разработчика)
//  2. Каждый уровень иерархии = отдельный экран (UIViewController)
//  3. Реализовать обработку жизненного цикла текущего уровня иерархии (например его удаление). Один из примеров: пользователь находится на экране звездно-планетарной системы и в это самое время родительская галактика сталкивается с другой галактикой в результате чего текущая звездно-планетарная система случайным образом выбрана для уничтожения. Необходимо корректно реализовать это состояние с точки зрения UI (например плейсхолдер или алерт с возвратом на более высокий уровень иерархии).
//
//
//  Бонус
//
//  - Реализация функции ускорения течения времени во Вселенной
//  - Реализация функции реверса времени во Вселенной


